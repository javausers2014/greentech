<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter>
	<title>云计算</title>

	<sect1><title>云计算概述</title>
		<para>从最高层的意义上讲，云计算代表了从以基本建设费用购买软硬件进行过渡计算，到按照需求以营业预算来“租用”工具式服务这一不可阻挡的转变。 云计算的内涵在于，多余的计算资源能够进行动态分配，因此企业可以通过只购买那些需要的计算服务来杜绝浪费。 这种动态作用提供了全新概念的业务灵活性，因为随着时间的推移，企业将能够把“即时生产”的概念应用于计算工作。 事实上这还算不上一套理论，但一些只能在传统计算方面进行有限投入的中小型企业已经积极采用了云计算，并且对于较大的企业形成了竞争压力，迫使他们同样采取云计算方法。</para>
<para>美国国家标准与技术研究院(NIST)制订了一套广泛采用的术语用于描述云计算的各方面内容。 NIST针对“云”定义了三大交付模式，称为S-P-I模式:</para>
<itemizedlist>
			<listitem><para>软件即服务(SaaS)，即将整个商业应用作为一项服务来提供;</para></listitem>
    <listitem><para>平台即服务(PaaS)，允许在云中进行快速应用开发;</para></listitem>
	<listitem><para>架构即服务(IaaS)，即将简单操作系统(OS)和储存功能作为一项服务来提供。</para></listitem>
</itemizedlist>    
<para>NIST进一步定义了云计算的四大配置:</para>
<itemizedlist>
<listitem><para>公共云，即面向广泛客户群的互联网接入服务;</para></listitem>
<listitem><para>私有云，针对单个机构进行配置;</para></listitem>
<listitem><para>社区云，针对供应链这类有限数量的，彼此相关的组织设计;</para></listitem>
<listitem><para>混合云，以上三种配置模式的任意组合。</para></listitem>
</itemizedlist>    
<para> 为了将云计算作为一种低成本工具来提供，云服务供应商必须掌握一些管理方面的问题以形成规模经济。 诸如虚拟化这类技术可以用来获取一切可能的CPU周期和空余磁盘空间。 此外还设计了一些新的管理工具来实现客户供应和资源分配的自动化。为了创建高效的规模经济，将不可避免地导致许多客户的数据和其他资产在共享的硬件平台上相互混杂，而这些数据和资产只是用一些新的，往往未经验证的逻辑控制方法进行区分。 另一个主要的，可能也是最为深远的影响是，实现这种经济效益的新技术架构本身就是一种新的应用开发平台。 在计算中很少出现重大的平台转换。 软件在云中得到革新，而新的软件则革新了商业运作方式。 
		<itemizedlist>
			<listitem><para>Rich set of widgets (based on Sencha's Ext Javascript Library i.e. ext JS)</para></listitem>
			<listitem><para>Support of multiple view modes &amp; Navigation menus, etc</para></listitem>
			<listitem><para>Local UI intercommunication, Server Push</para></listitem>
			<listitem><para>Remoting (service invocation)</para></listitem>
			<listitem><para>Support of reusable modules, Plug-ins</para></listitem>
			<listitem><para>Security integration, Internationalization</para></listitem>
			<listitem><para>JMX support (for administration)</para></listitem>
		</itemizedlist>With benifits from Spring Framework, Webtop server context could easily adopt business service and client-server remoting technologies, such as DWR and Restlet. So that on the client side, extJS UI widget could easily invoke remote service with supports provided by Webtop javascript library.
		<figure id="figure.intro_arch" pgwide="1">
			<title>Architecture</title>
			<mediaobject>
				<imageobject><imagedata align="center" fileref="images/webtop-comp.png" format="PNG" scalefit="0" /></imageobject>
			</mediaobject>
		</figure>
		</para>

	<sect2>
		<title>云计算对于终端用户的影响</title>
		<para>现在的电视已经不再只被用来被动地收看电视节目，而是能进行个性化应用和内容的“定制”。 如果说平板电视时代让人们看得更清晰；那么在未来的智能电视时代，人们将体验到全新的、智能化的的“三屏融合”生活： 世界杯的比赛在电视上没有看完，走在路上打开手机继续收看，而到了办公室，还能打开电脑继续观看（当然，你不能耽误工作） The core of Sencha's Javascript Library, Ext JS, is an object-oriented JavaScript framework. Is makes Java developer's study life easier. For Spring Framework, it's not necessary to introduce more. With Webtop, the communication between client and server become easy and unified. Developer just need to register his POJO to Webtop then it could be used by UI dumped to client at runtime and he can put more efforts to build business service.</para>
	</sect2>		
	
	<sect2>
		<title>云计算对于软件开发的影响</title>
		<para><itemizedlist>
			<listitem>
				<para><emphasis role="bold">Client Environment Requirement</emphasis> Grade-A Browsers (IE6+, FireFox2+, Chrome, Safari)</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Server Environment Requirement</emphasis> Java 1.5+, Servlet specifications 2.4 (2.5 if NIO required)</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Development Environment Requirement</emphasis> Java 1.5+, Apache Maven 2.2.x</para>
			</listitem>				
		</itemizedlist></para>
	</sect2>		
	</sect1>	
</chapter>
